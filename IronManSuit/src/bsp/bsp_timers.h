// ****************************************************************************
// Software timers
// ****************************************************************************
//
// In external file must be defined:
//   SWTIMERS_MAX
//   TIMER_ISR_PERIOD_MSEC
//
// ****************************************************************************
#ifndef BSP_TIMERS_H
#define BSP_TIMERS_H

#include <stdint.h>


// ----------------------------------------------------------------------------
// Базовый тик программных таймеров [мс] - период между прерываниями аппаратного таймера 
// Отпределяет минимальное время на которое можно запустить программный таймер
#ifndef TIMER_ISR_PERIOD_MSEC
    #error "ERROR: Missing declaration for TIMER_ISR_PERIOD_MSEC (period between HW timer interrupts)"
#endif

#ifndef SWTIMERS_MAX
    #error "ERROR: Missing declaration for SWTIMERS_MAX (count of timers)"
#endif

// Минимальное время определяется тиком аппаратного таймера
// Mаксимальное время для программных таймеров - 1 чаc
#define SWTIMERS_MIN_TIME   TIMER_ISR_PERIOD_MSEC
#define SWTIMERS_MAX_TIME   3600000UL


// ----------------------------------------------------------------------------
// Режим работы программного таймера
typedef enum {
    SWTIMER_SINGLE       = 0,    // однократный, обработка в основном потоке
    SWTIMER_PERIODIC     = 1,    // циклический, обработка в основном потоке  
    SWTIMER_SINGLE_ASYNC = 2,    // однократный, асинхронный обработка в основном потоке  
} swTimerMode_t;


// ----------------------------------------------------------------------------
// Обработчик (вызывается после проверки флага таймера из основного цикла или из прерывания) 
typedef void (*swTimerHandler)(void);



// ****************************************************************************
//
// ****************************************************************************
// Инициализация - обнуление состояний, запуск аппаратного таймера
void BSP_timer_init(void);

// Запуск таймера на миллисекундный интервал от SWTIMERS_MIN_TIME до SWTIMERS_MAX_TIME [ms]
void BSP_timer_start_ms(uint8_t id, uint32_t timeout_ms, 
                          swTimerMode_t mode, swTimerHandler handler);
                         
// Проверка состояния таймера
// Возвращает: 0 - остановлен, 1 - запущен, 0xFF - не был создан
uint8_t BSP_timer_is_run(uint8_t id);

// Остановка таймера
// Возвращает: время [ms], прошедшее от запуска таймера (или 0, если таймер не был запущен)
uint32_t BSP_timer_stop(uint8_t id);

// Проверка флага срабатывания одного таймера и вызов обработчика
// После проверки флаг срабатывания сбрасывается 
void BSP_timer_process(uint8_t id);

// Последовательная проверка флага срабатывания для всех таймеров и вызов обработчиков
// После проверки флаг срабатывания сбрасывается
void BSP_timer_process_all(void);


#endif
